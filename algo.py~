from tests import *

memoization = {
	maxsize: 0,
	solutions: []
	}
piece = forme
pieces = [[1, 2, 3], [1,-1,-2]]

def create_mat(n):
    return '0' * n

def p(matrice):
    for i, v in enumerate(matrice):
	if (i != 0 and i % 4 == 0):
	    w('\n')
	w(v)

def check(pieces):
    return bool(size(piece))

def test_all_places(pieces, size):
    matrice = create_mat(size^2)
    for piece, i in pieces:
	for x in range(0, size^2 - 1):
	    #if (!piece.fit()) // break
	 if (place(i, piece, matrice)):
	     matrice = draw(i, piece, matrice)
    return True 

def draw(i, piece, matrice):
   matrice[i] = '1'
   

def place(x, piece, matrice):
    if (not matrice[x]):
	for (pos_piece in pieces):
	   x += pos_piece
	   if (matrice[x]): 
	       return False
    return True

def calc_size(pieces):
    return 4 

def main(pieces):
    if (check(pieces)):
	size = calc_size(pieces)
	for (i in itertools.permutations(pieces)):
	    if (test_all_places(pieces, size))
		return matrice
	    size += 1 

p(main(pieces))


